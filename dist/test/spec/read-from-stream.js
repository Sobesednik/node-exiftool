'use strict';

require('source-map-support/register');

var assert = require('assert');
var context = require('exiftool-context');
var fs = require('fs');
var makepromise = require('makepromise');
var exiftool = require('../../src/');
var executeWithRs = require('../../src/execute-with-rs');

context.globalExiftoolConstructor = exiftool.ExiftoolProcess;

var readFromStreamTestSuite = {
    context: context,
    'should read metadata from a read stream': function shouldReadMetadataFromAReadStream(ctx) {
        ctx.create();
        return ctx.ep.open().then(function () {
            var rs = fs.createReadStream(ctx.jpegFile);
            return ctx.ep.readMetadata(rs);
        }).then(function (res) {
            assert(Array.isArray(res.data));
            assert(res.data.length > 0);
            return ctx.assertJpegMetadata(res.data[0]);
        });
    }
};

function assertDoesNotExist(file) {
    return makepromise(fs.stat, [file]).then(function () {
        throw new Error('should have thrown ENOENT error');
    }, function (err) {
        if (!/ENOENT/.test(err.message)) {
            throw err;
        }
    });
}
function assertExists(file) {
    return makepromise(fs.stat, [file]).then(function () {});
}

var readFromRsTestSuite = {
    context: context,
    'should reject if non-readable passed': function shouldRejectIfNonReadablePassed() {
        return executeWithRs('string', null, function () {}).then(function () {
            throw new Error('should have thrown an error');
        }, function (err) {
            assert.equal(err.message, 'Please pass a readable stream');
        });
    },
    'should reject if executeCommand is not a function': function shouldRejectIfExecuteCommandIsNotAFunction(ctx) {
        var rs = fs.createReadStream(ctx.jpegFile);
        return executeWithRs(rs).then(function () {
            throw new Error('should have thrown an error');
        }, function (err) {
            assert.equal(err.message, 'executeCommand must be a function');
        });
    },
    'should read from a rs': function shouldReadFromARs(ctx) {
        ctx.create();
        return ctx.ep.open().then(function () {
            var rs = fs.createReadStream(ctx.jpegFile);
            var executeCommand = ctx.ep._executeCommand.bind(ctx.ep);
            return executeWithRs(rs, null, executeCommand);
        }).then(function (res) {
            assert(Array.isArray(res.data));
            assert(res.data.length > 0);
            return ctx.assertJpegMetadata(res.data[0]);
        });
    },
    'should return execute function result': function shouldReturnExecuteFunctionResult(ctx) {
        var rs = fs.createReadStream(ctx.jpegFile);
        var result = [{ some: 'metadata' }, null];
        var executeCommand = function executeCommand() {
            return result;
        };
        return executeWithRs(rs, null, executeCommand).then(function (res) {
            assert.strictEqual(res, result);
        });
    },
    'should call executeCommand with an existing file': function shouldCallExecuteCommandWithAnExistingFile(ctx) {
        var rs = fs.createReadStream(ctx.jpegFile);
        var tempFile = void 0;
        var fileCreated = false;
        var error = void 0;
        var executeCommand = function executeCommand(_tempFile) {
            tempFile = _tempFile;
            return assertExists(tempFile).then(function () {
                fileCreated = true;
            }, function (_error) {
                error = _error;
            });
        };
        return executeWithRs(rs, null, executeCommand).then(function () {
            assert(fileCreated);
            assert.equal(error, undefined);
        });
    },
    'should call executeCommand with args': function shouldCallExecuteCommandWithArgs(ctx) {
        var rs = fs.createReadStream(ctx.jpegFile);
        var testArgs = ['some-arg=value'];
        var args = void 0;
        var executeCommand = function executeCommand(_, _args) {
            args = _args;
        };
        return executeWithRs(rs, testArgs, executeCommand).then(function () {
            assert.strictEqual(args, testArgs);
        });
    },
    'should remove temp file': function shouldRemoveTempFile(ctx) {
        var rs = fs.createReadStream(ctx.jpegFile);
        var tempFile = void 0;
        var executeCommand = function executeCommand(_tempFile) {
            tempFile = _tempFile;
        };
        return executeWithRs(rs, null, executeCommand).then(function () {
            return assertDoesNotExist(tempFile);
        });
    },
    'should reject with execution error': function shouldRejectWithExecutionError(ctx) {
        ctx.create();
        var error = new Error('error during execution');
        return ctx.ep.open().then(function () {
            var rs = fs.createReadStream(ctx.jpegFile);
            var executeCommand = function executeCommand() {
                throw error;
            };
            return executeWithRs(rs, null, executeCommand);
        }).then(function () {
            throw new Error('should have thrown execution error');
        }, function (err) {
            assert.strictEqual(err, error);
        });
    },
    'should remove temp file if executeCommand failed': function shouldRemoveTempFileIfExecuteCommandFailed(ctx) {
        ctx.create();
        var error = new Error('error during execution');
        var tempFile = void 0;
        return ctx.ep.open().then(function () {
            var rs = fs.createReadStream(ctx.jpegFile);
            var executeCommand = function executeCommand(_tempFile) {
                tempFile = _tempFile;
                throw error;
            };
            return executeWithRs(rs, null, executeCommand);
        }).then(function () {
            throw new Error('should have thrown execution error');
        }, function () {
            return assertDoesNotExist(tempFile);
        });
    }
};

module.exports = {
    readFromStreamTestSuite: readFromStreamTestSuite,
    readFromRsTestSuite: readFromRsTestSuite
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,